limugali - Lightweight Multiplayer Game Library
-----------------------------------------------

Writing network code sucks. Whenever I think of an awesome idea for a multiplayer game, I proceed to spend the next two weeks trying to write the network abstraction layer. This is way too long to try and get a prototype going, so eventually I get disillusioned and bored of my original idea and move on to something new and the great game idea is lost. This code is a solution to that problem: it's a lightweight network layer that gets out of your way and lets you focus on the game. It delivers network events to your game classes in what I think is a very elegant fashion in the form of callback methods on "listener" classes. Each class within your game that wants to receive network events subclasses the ConnectionListener class and then implements Network_* methods to catch specific events from the server. You don't have to wait for buffers to fill, or check sockets for waiting data or anything like that, just do connection.Poll() once per game loop and the library will handle everything for you, passing off events to all classes that are listening.

limugali uses the popular JSON format to serialize data and pass between remotely connected Python processes. This should make it easier to write clients in languages other than Python. JSON was chosen because there is a parsing library written for just about every language out there in the world: http://json.org/

Why not use twisted instead?
---------------------------

Twisted:

* steals the mainloop
* is bloated not KISS
* has a weird template launching language when Python does fine

